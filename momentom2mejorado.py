# -*- coding: utf-8 -*-
"""MomentoM2Mejorado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JwiyoKg9YMwAD8zwWw9xUnPHLPqx_25M
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, precision_score, recall_score, f1_score

# Leer el dataset y realizar la limpieza
df = pd.read_csv("Calorias FastF.csv")
df = df.apply(pd.to_numeric, errors='coerce')
df['Calories'] = np.where(df['Calories'] > 219, 'Si', 'No')
df = df.dropna()

# Definir las características y etiquetas
x = np.array(df['Calories from\nFat']).reshape(-1, 1)
y = np.array(df['Calories'])
y = np.where(y == 'Si', 1, 0).reshape(-1, 1)  # Convertir la clasificación a binaria

# Dividir los datos en entrenamiento y prueba
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Definir la estructura de la red
input_size = x_train.shape[1]  # Una característica de entrada
hidden_size = 10  # Número de neuronas en la capa oculta (puedes ajustar este valor)
output_size = 1  # Una salida (clasificación binaria)

# Inicializar pesos y bias
np.random.seed(42)
W1 = np.random.randn(input_size, hidden_size) * 0.01
b1 = np.zeros((1, hidden_size))
W2 = np.random.randn(hidden_size, output_size) * 0.01
b2 = np.zeros((1, output_size))

# Definir hiperparámetros
alpha = 0.01  # Tasa de aprendizaje
epochs = 10000  # Número de iteraciones

# Función de activación sigmoidal
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Derivada de la función sigmoidal
def sigmoid_derivative(z):
    return z * (1 - z)

# Forward propagation
def forward_propagation(x):
    Z1 = np.dot(x, W1) + b1  # Entrada a la capa oculta
    A1 = sigmoid(Z1)  # Salida de la capa oculta
    Z2 = np.dot(A1, W2) + b2  # Entrada a la capa de salida
    A2 = sigmoid(Z2)  # Salida final (predicción)
    return Z1, A1, Z2, A2

# Backpropagation
def backpropagation(x, y, Z1, A1, Z2, A2):
    m = x.shape[0]  # Número de ejemplos

    # Calcular el error en la capa de salida
    dZ2 = A2 - y
    dW2 = (1/m) * np.dot(A1.T, dZ2)
    db2 = (1/m) * np.sum(dZ2, axis=0, keepdims=True)

    # Calcular el error en la capa oculta
    dA1 = np.dot(dZ2, W2.T)
    dZ1 = dA1 * sigmoid_derivative(A1)
    dW1 = (1/m) * np.dot(x.T, dZ1)
    db1 = (1/m) * np.sum(dZ1, axis=0, keepdims=True)

    return dW1, db1, dW2, db2

# Entrenamiento de la red neuronal
for epoch in range(epochs):
    # Propagación hacia adelante
    Z1, A1, Z2, A2 = forward_propagation(x_train)

    # Calcular el costo (error cuadrático medio)
    costo = np.mean(np.square(y_train - A2))

    # Propagación hacia atrás
    dW1, db1, dW2, db2 = backpropagation(x_train, y_train, Z1, A1, Z2, A2)

    # Actualizar los pesos y bias
    W1 -= alpha * dW1
    b1 -= alpha * db1
    W2 -= alpha * dW2
    b2 -= alpha * db2

    # Imprimir el costo cada 1000 iteraciones
    if epoch % 1000 == 0:
        print(f"Epoch {epoch+1}, Costo: {costo:.6f}")

# Predicciones finales en el conjunto de entrenamiento
_, _, _, A2_train = forward_propagation(x_train)
predicciones_train = np.where(A2_train > 0.5, 1, 0)

# Matriz de confusión para el conjunto de entrenamiento
cm_train = confusion_matrix(y_train, predicciones_train)
disp_train = ConfusionMatrixDisplay(confusion_matrix=cm_train)
disp_train.plot(cmap=plt.cm.Blues)
plt.title("Matriz de Confusión - Entrenamiento")
plt.show()

# Métricas de rendimiento en el conjunto de entrenamiento
precision_train = precision_score(y_train, predicciones_train)
recall_train = recall_score(y_train, predicciones_train)
f1_train = f1_score(y_train, predicciones_train)

print(f"Precisión (Entrenamiento): {precision_train:.2f}")
print(f"Recall (Entrenamiento): {recall_train:.2f}")
print(f"F1 Score (Entrenamiento): {f1_train:.2f}\n")

# Predicciones en el conjunto de prueba
_, _, _, A2_test = forward_propagation(x_test)
predicciones_test = np.where(A2_test > 0.5, 1, 0)

# Matriz de confusión para el conjunto de prueba
cm_test = confusion_matrix(y_test, predicciones_test)
disp_test = ConfusionMatrixDisplay(confusion_matrix=cm_test)
disp_test.plot(cmap=plt.cm.Blues)
plt.title("Matriz de Confusión - Prueba")
plt.show()

# Métricas de rendimiento en el conjunto de prueba
precision_test = precision_score(y_test, predicciones_test)
recall_test = recall_score(y_test, predicciones_test)
f1_test = f1_score(y_test, predicciones_test)

print(f"Precisión (Prueba): {precision_test:.2f}")
print(f"Recall (Prueba): {recall_test:.2f}")
print(f"F1 Score (Prueba): {f1_test:.2f}\n")